@page "/usuarios/nuevo"
@page "/usuarios/editar/{Id:int}"
@attribute [Authorize(Roles = "Admin")] // <-- ¡Protege toda la página!

@inject HttpClient Http
@inject NavigationManager Navigation

<PageTitle>@(Id.HasValue ? "Editar Usuario" : "Nuevo Usuario")</PageTitle>

<h3>@(Id.HasValue ? "Editar Usuario" : "Nuevo Usuario")</h3>

<div style="max-width: 500px;">
    @if (usuario == null)
    {
        <p><em>Cargando...</em></p>
    }
    else
    {
        <EditForm Model="@usuario" OnValidSubmit="Aceptar">
            <DataAnnotationsValidator />

            @if (Id.HasValue)
            {
                <div class="mb-3">
                    <label class="form-label">ID:</label>
                    <InputNumber @bind-Value="usuario.Id" class="form-control" disabled />
                </div>
            }

            <div class="mb-3">
                <label class="form-label">Nombre: *</label>
                <InputText @bind-Value="usuario.Nombre" class="form-control" />
                <ValidationMessage For="@(() => usuario.Nombre)" />
            </div>

            <div class="mb-3">
                <label class="form-label">Apellido: *</label>
                <InputText @bind-Value="usuario.Apellido" class="form-control" />
                <ValidationMessage For="@(() => usuario.Apellido)" />
            </div>

            <div class="mb-3">
                <label class="form-label">Email: *</label>
                <InputText type="email" @bind-Value="usuario.Email" class="form-control" />
                <ValidationMessage For="@(() => usuario.Email)" />
            </div>

            <div class="mb-3">
                <label class="form-label">Contraseña: *</label>
                <InputText type="password" @bind-Value="usuario.Contrasena" class="form-control" placeholder="@(Id.HasValue ? "Dejar en blanco para no cambiar" : "")" />
                <ValidationMessage For="@(() => usuario.Contrasena)" />
            </div>

            <div class="mb-3 form-check">
                <InputCheckbox @bind-Value="usuario.EsAdmin" class="form-check-input" id="esAdmin" />
                <label for="esAdmin" class="form-check-label">Es Administrador</label>
            </div>

            @if (errorMessage != null)
            {
                <div class="alert alert-danger">
                    @errorMessage
                </div>
            }

            <div class="mt-3">
                <button type="submit" class="btn btn-primary">Aceptar</button>
                <button type="button" class="btn btn-secondary ms-2" @onclick="Cancelar">Cancelar</button>
            </div>
        </EditForm>
    }
</div>


@code {
    [Parameter]
    public int? Id { get; set; }

    private UsuarioDTO? usuario;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        // El atributo [Authorize] ya se encargó de verificar que el usuario es Admin.
        if (Id.HasValue)
        {
            try
            {
                usuario = await Http.GetFromJsonAsync<UsuarioDTO>($"usuarios/{Id}");
            }
            catch (Exception ex)
            {
                errorMessage = $"Error al cargar el usuario: {ex.Message}";
            }
        }
        else
        {
            usuario = new UsuarioDTO();
        }
    }

    private async Task Aceptar()
    {
        if (usuario is null) return;

        errorMessage = null;

        // Validaciones básicas (se pueden mejorar con DataAnnotations en el DTO)
        if (string.IsNullOrWhiteSpace(usuario.Nombre) || string.IsNullOrWhiteSpace(usuario.Apellido) || string.IsNullOrWhiteSpace(usuario.Email))
        {
            errorMessage = "Nombre, Apellido y Email son obligatorios.";
            return;
        }

        // Para un nuevo usuario, la contraseña es obligatoria
        if (!Id.HasValue && string.IsNullOrWhiteSpace(usuario.Contrasena))
        {
            errorMessage = "La contraseña es obligatoria para nuevos usuarios.";
            return;
        }
        
        try
        {
            HttpResponseMessage response;

            if (Id.HasValue)
            {
                // Modificar
                response = await Http.PutAsJsonAsync("usuarios", usuario);
            }
            else
            {
                // Agregar
                response = await Http.PostAsJsonAsync("usuarios", usuario);
            }

            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/usuarios");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Error al guardar el usuario: {error}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
    }

    private void Cancelar()
    {
        Navigation.NavigateTo("/usuarios");
    }
}