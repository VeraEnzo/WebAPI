@page "/productos"
@attribute [Authorize]
@implements IDisposable

@inject HttpClient Http
@inject NavigationManager Navigation
@inject CarritoService CarritoService

<PageTitle>Lista de Productos</PageTitle>

<h1>Lista de Productos</h1>

@if (mensajeConfirmacion != null)
{
    <div class="alert alert-success" role="alert">
        @mensajeConfirmacion
    </div>
}

<AuthorizeView Roles="Admin">
    <Authorized>
        <div class="mb-3">
            <button class="btn btn-success" @onclick="AgregarProducto">Agregar Nuevo Producto</button>
        </div>
    </Authorized>
</AuthorizeView>

@if (listaProductos == null)
{
    <p><em>Cargando productos...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Nombre</th>
                <th>Descripción</th>
                <th class="text-end">Precio</th>
                <th class="text-end">Stock</th>
                <th>Añadir al Carrito</th>
                <AuthorizeView Roles="Admin">
                    <th>Acciones Admin</th>
                </AuthorizeView>
            </tr>
        </thead>
        <tbody>
            @foreach (var prod in listaProductos)
            {
                <tr>
                    <td>@prod.Nombre</td>
                    <td>@prod.Descripcion</td>
                    <td class="text-end">@prod.Precio.ToString("C")</td>
                    <td class="text-end">@prod.Stock</td>
                    <td>
                        <div class="input-group input-group-sm" style="max-width: 150px;">
                            <button class="btn btn-sm btn-secondary" @onclick="() => AjustarCantidad(prod.Id, -1)">-</button>
                            <input type="number" class="form-control text-center" @bind="cantidades[prod.Id]" @bind:event="oninput" min="1" max="@prod.Stock" />
                            <button class="btn btn-sm btn-secondary" @onclick="() => AjustarCantidad(prod.Id, 1, prod.Stock)">+</button>
                            <button class="btn btn-primary ms-2" @onclick="() => HandleAgregarAlCarrito(prod)">
                                <span class="bi bi-cart"></span>
                            </button>
                        </div>
                    </td>
                    <AuthorizeView Roles="Admin">
                        <td>
                            <button class="btn btn-sm btn-primary" @onclick="() => ModificarProducto(prod)">Modificar</button>
                            <button class="btn btn-sm btn-danger" @onclick="() => EliminarProducto(prod)">Eliminar</button>
                        </td>
                    </AuthorizeView>
                </tr>
            }
        </tbody>
    </table>
}

@if (errorMessage != null)
{
    <div class="alert alert-danger mt-3">@errorMessage</div>
}

@if (mostrarConfirmacion)
{
    <div class="modal" style="display: block; background: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmar eliminación</h5>
                </div>
                <div class="modal-body">
                    <p>¿Está seguro de eliminar el producto '@productoAEliminar?.Nombre'?</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CancelarEliminacion">Cancelar</button>
                    <button class="btn btn-danger" @onclick="ConfirmarEliminacion">Eliminar</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<ProductoDTO>? listaProductos;
    private Dictionary<int, int> cantidades = new();
    private string? errorMessage;
    private string? mensajeConfirmacion;
    private Timer? mensajeTimer;

    // Variables para el modal de eliminación
    private bool mostrarConfirmacion = false;
    private ProductoDTO? productoAEliminar;

    protected override async Task OnInitializedAsync()
    {
        await CargarProductos();
        mensajeTimer = new Timer(LimpiarMensaje, null, Timeout.Infinite, Timeout.Infinite);
    }

    private async Task CargarProductos()
    {
        try
        {
            listaProductos = await Http.GetFromJsonAsync<List<ProductoDTO>>("productos");
            if (listaProductos != null)
            {
                foreach (var prod in listaProductos)
                {
                    if (!cantidades.ContainsKey(prod.Id))
                    {
                        cantidades.Add(prod.Id, 1);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al obtener productos: {ex.Message}";
        }
    }

    private void AjustarCantidad(int productoId, int ajuste, int maxStock = int.MaxValue)
    {
        var nuevaCantidad = cantidades[productoId] + ajuste;
        if (nuevaCantidad >= 1 && nuevaCantidad <= maxStock)
        {
            cantidades[productoId] = nuevaCantidad;
        }
    }

    private void HandleAgregarAlCarrito(ProductoDTO producto)
    {
        int cantidadAAgregar = cantidades[producto.Id];
        CarritoService.AgregarAlCarrito(producto, cantidadAAgregar);

        mensajeConfirmacion = $"{cantidadAAgregar} x '{producto.Nombre}' se ha(n) añadido al carrito.";
        mensajeTimer?.Change(3000, Timeout.Infinite);
        cantidades[producto.Id] = 1;
    }

    private void LimpiarMensaje(object? state)
    {
        mensajeConfirmacion = null;
        InvokeAsync(StateHasChanged);
    }

    // --- Métodos de Admin ---
    private void AgregarProducto() => Navigation.NavigateTo("/productos/nuevo");
    private void ModificarProducto(ProductoDTO producto) => Navigation.NavigateTo($"/productos/editar/{producto.Id}");

    // --- Lógica del Modal de Eliminación (integrada) ---
    private void EliminarProducto(ProductoDTO producto)
    {
        productoAEliminar = producto;
        mostrarConfirmacion = true;
    }

    private void CancelarEliminacion()
    {
        productoAEliminar = null;
        mostrarConfirmacion = false;
    }

    private async Task ConfirmarEliminacion()
    {
        if (productoAEliminar != null)
        {
            try
            {
                var response = await Http.DeleteAsync($"productos/{productoAEliminar.Id}");
                if (response.IsSuccessStatusCode)
                {
                    await CargarProductos(); // Recargar la lista para ver el cambio
                }
                else
                {
                    errorMessage = "Error al eliminar el producto.";
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"Error: {ex.Message}";
            }
            finally
            {
                mostrarConfirmacion = false;
                productoAEliminar = null;
            }
        }
    }

    public void Dispose()
    {
        mensajeTimer?.Dispose();
    }
}