@page "/productos/nuevo"
@page "/productos/editar/{Id:int}"
@inject HttpClient Http
@inject AuthService AuthService
@inject NavigationManager Navigation

<PageTitle>@(Id.HasValue ? "Editar Producto" : "Nuevo Producto")</PageTitle>

<h3>@(Id.HasValue ? "Editar Producto" : "Nuevo Producto")</h3>

@if (!AuthService.EsAdministrador)
{
    <div class="alert alert-danger">
        No tiene permisos para realizar esta acción.
    </div>
    <button class="btn btn-secondary" @onclick="Cancelar">Volver</button>
}
else
{
    <div style="max-width: 500px;">
        @if (Id.HasValue)
        {
            <div class="mb-3">
                <label class="form-label">ID:</label>
                <input type="text" value="@producto.Id" class="form-control" disabled />
            </div>
        }

        <div class="mb-3">
            <label class="form-label">Nombre: *</label>
            <input type="text" @bind="producto.Nombre" class="form-control" />
        </div>

        <div class="mb-3">
            <label class="form-label">Descripción:</label>
            <textarea @bind="producto.Descripcion" class="form-control" rows="3"></textarea>
        </div>

        <div class="mb-3">
            <label class="form-label">Precio: *</label>
            <input type="number" step="0.01" @bind="producto.Precio" class="form-control" />
        </div>

        <div class="mb-3">
            <label class="form-label">Stock: *</label>
            <input type="number" @bind="producto.Stock" class="form-control" />
        </div>

        <div class="mb-3">
            <label class="form-label">Categoría ID: *</label>
            <input type="number" @bind="producto.CategoriaId" class="form-control" />
        </div>

        <div class="mb-3">
            <label class="form-label">Proveedor ID: *</label>
            <input type="number" @bind="producto.ProveedorId" class="form-control" />
        </div>

        @if (errorMessage != null)
        {
            <div class="alert alert-danger">
                @errorMessage
            </div>
        }

        <div class="mt-3">
            <button class="btn btn-primary" @onclick="Aceptar">Aceptar</button>
            <button class="btn btn-secondary ms-2" @onclick="Cancelar">Cancelar</button>
        </div>
    </div>
}

@code {
    [Parameter]
    public int? Id { get; set; }

    private ProductoDTO producto = new ProductoDTO();
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        if (!AuthService.EsAdministrador)
        {
            return;
        }

        if (Id.HasValue)
        {
            try
            {
                producto = await Http.GetFromJsonAsync<ProductoDTO>($"productos/{Id}") ?? new ProductoDTO();
            }
            catch (Exception ex)
            {
                errorMessage = $"Error al cargar el producto: {ex.Message}";
            }
        }
    }

    private async Task Aceptar()
    {
        errorMessage = null;

        // Validaciones básicas
        if (string.IsNullOrWhiteSpace(producto.Nombre))
        {
            errorMessage = "El nombre es obligatorio";
            return;
        }

        if (producto.Precio <= 0)
        {
            errorMessage = "El precio debe ser mayor a 0";
            return;
        }

        if (producto.Stock < 0)
        {
            errorMessage = "El stock no puede ser negativo";
            return;
        }

        if (producto.CategoriaId <= 0)
        {
            errorMessage = "Debe seleccionar una categoría válida";
            return;
        }

        if (producto.ProveedorId <= 0)
        {
            errorMessage = "Debe seleccionar un proveedor válido";
            return;
        }

        try
        {
            HttpResponseMessage response;

            if (Id.HasValue)
            {
                // Modificar - SIN el ID en la ruta, solo en el body
                response = await Http.PutAsJsonAsync("productos", producto);
            }
            else
            {
                // Agregar
                response = await Http.PostAsJsonAsync("productos", producto);
            }

            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/productos");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Error al guardar el producto: {error}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
    }

    private void Cancelar()
    {
        Navigation.NavigateTo("/productos");
    }
}