@page "/productos/nuevo"
@page "/productos/editar/{Id:int}"
@attribute [Authorize(Roles = "Admin")] // <-- ¡Protege la página a nivel de ruta!

@inject HttpClient Http
@inject NavigationManager Navigation

<PageTitle>@(Id.HasValue ? "Editar Producto" : "Nuevo Producto")</PageTitle>

<h3>@(Id.HasValue ? "Editar Producto" : "Nuevo Producto")</h3>

@if (producto == null)
{
    <p><em>Cargando...</em></p>
}
else
{
    <div style="max-width: 500px;">
        <EditForm Model="@producto" OnValidSubmit="Aceptar">
            <DataAnnotationsValidator />

            @if (Id.HasValue)
            {
                <div class="mb-3">
                    <label class="form-label">ID:</label>
                    <InputNumber @bind-Value="producto.Id" class="form-control" disabled />
                </div>
            }

            <div class="mb-3">
                <label class="form-label">Nombre: *</label>
                <InputText @bind-Value="producto.Nombre" class="form-control" />
                <ValidationMessage For="@(() => producto.Nombre)" />
            </div>

            <div class="mb-3">
                <label class="form-label">Descripción:</label>
                <InputText @bind-Value="producto.Descripcion" class="form-control" />
            </div>

            <div class="mb-3">
                <label class="form-label">Precio: *</label>
                <InputNumber @bind-Value="producto.Precio" class="form-control" />
                <ValidationMessage For="@(() => producto.Precio)" />
            </div>

            <div class="mb-3">
                <label class="form-label">Stock: *</label>
                <InputNumber @bind-Value="producto.Stock" class="form-control" />
                <ValidationMessage For="@(() => producto.Stock)" />
            </div>

            <div class="mb-3">
                <label class="form-label">Categoría ID: *</label>
                <InputNumber @bind-Value="producto.CategoriaId" class="form-control" />
            </div>

            <div class="mb-3">
                <label class="form-label">Proveedor ID: *</label>
                <InputNumber @bind-Value="producto.ProveedorId" class="form-control" />
            </div>

            @if (errorMessage != null)
            {
                <div class="alert alert-danger">
                    @errorMessage
                </div>
            }

            <div class="mt-3">
                <button type="submit" class="btn btn-primary">Aceptar</button>
                <button type="button" class="btn btn-secondary ms-2" @onclick="Cancelar">Cancelar</button>
            </div>
        </EditForm>
    </div>
}


@code {
    [Parameter]
    public int? Id { get; set; }

    private ProductoDTO? producto;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        // El atributo [Authorize] ya se encargó de verificar los permisos.
        // Si el código llega aquí, es porque el usuario es Admin.
        if (Id.HasValue)
        {
            try
            {
                // Esta llamada ahora funcionará porque el sistema adjunta el token automáticamente.
                producto = await Http.GetFromJsonAsync<ProductoDTO>($"productos/{Id}");
            }
            catch (Exception ex)
            {
                errorMessage = $"Error al cargar el producto: {ex.Message}";
            }
        }
        else
        {
            producto = new ProductoDTO();
        }
    }

    private async Task Aceptar()
    {
        if (producto is null) return;
        errorMessage = null;

        try
        {
            HttpResponseMessage response;
            if (Id.HasValue)
            {
                // Modificar
                response = await Http.PutAsJsonAsync("productos", producto);
            }
            else
            {
                // Agregar
                response = await Http.PostAsJsonAsync("productos", producto);
            }

            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/productos");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Error al guardar el producto: {error}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
    }

    private void Cancelar()
    {
        Navigation.NavigateTo("/productos");
    }
}