@page "/login"
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Login</PageTitle>

<div style="max-width: 400px; margin: 50px auto; padding: 20px; border: 1px solid #ccc; border-radius: 5px;">
    <h3>Iniciar Sesión</h3>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3">
            @errorMessage
        </div>
    }

    <div class="mb-3">
        <label for="email" class="form-label">Email:</label>
        <input id="email" type="email" @bind="email" class="form-control" />
    </div>

    <div class="mb-3">
        <label for="password" class="form-label">Contraseña:</label>
        <input id="password" type="password" @bind="contrasena" class="form-control" />
    </div>

    <div class="d-flex align-items-center">
        <button @onclick="Ingresar" class="btn btn-primary">Ingresar</button>

        <a href="/registro" class="btn btn-link ms-auto">No tengo cuenta, registrarme</a>
    </div>
</div>

@code {
    private string email = "";
    private string contrasena = "";
    private string? errorMessage;

    private async Task Ingresar()
    {
        errorMessage = null;

        if (string.IsNullOrWhiteSpace(email) || string.IsNullOrWhiteSpace(contrasena))
        {
            errorMessage = "Por favor, complete todos los campos.";
            return;
        }

        try
        {
            var success = await AuthService.LoginAsync(email, contrasena);

            if (success)
            {
                // Añadimos "?loginSuccess=true" a la URL para avisarle a la página Home
                Navigation.NavigateTo("/?loginSuccess=true", forceLoad: true);
            }
            else
            {
                errorMessage = "Email o contraseña incorrectos.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al conectar con el servidor: {ex.Message}";
        }
    }
}