@page "/registro"
@inject HttpClient Http
@inject NavigationManager Navigation

<PageTitle>Registro de Nuevo Usuario</PageTitle>

<div style="max-width: 500px; margin: 50px auto;">
    <h3>Crear una cuenta nueva</h3>

    <EditForm Model="@nuevoUsuario" OnValidSubmit="HandleRegistro">
        <DataAnnotationsValidator />

        <div class="mb-3">
            <label class="form-label">Nombre: *</label>
            <InputText @bind-Value="nuevoUsuario.Nombre" class="form-control" />
            <ValidationMessage For="@(() => nuevoUsuario.Nombre)" />
        </div>

        <div class="mb-3">
            <label class="form-label">Apellido: *</label>
            <InputText @bind-Value="nuevoUsuario.Apellido" class="form-control" />
            <ValidationMessage For="@(() => nuevoUsuario.Apellido)" />
        </div>

        <div class="mb-3">
            <label class="form-label">Email: *</label>
            <InputText type="email" @bind-Value="nuevoUsuario.Email" class="form-control" />
            <ValidationMessage For="@(() => nuevoUsuario.Email)" />
        </div>

        <div class="mb-3">
            <label class="form-label">Contraseña: *</label>
            <InputText type="password" @bind-Value="nuevoUsuario.Contrasena" class="form-control" />
            <ValidationMessage For="@(() => nuevoUsuario.Contrasena)" />
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">@errorMessage</div>
        }

        @if (successMessage != null)
        {
            <div class="alert alert-success">
                @successMessage <a href="/login">Iniciar Sesión</a>
            </div>
        }

        <div class="mt-3">
            <button type="submit" class="btn btn-primary" disabled="@(isSubmitting || successMessage != null)">Registrarse</button>
            <a href="/login" class="btn btn-link">Ya tengo una cuenta</a>
        </div>
    </EditForm>
</div>

@code {
    private UsuarioDTO nuevoUsuario = new();
    private string? errorMessage;
    private string? successMessage;
    private bool isSubmitting = false;

    private async Task HandleRegistro()
    {
        errorMessage = null;
        successMessage = null;
        isSubmitting = true;

        try
        {
            var response = await Http.PostAsJsonAsync("usuarios/registro", nuevoUsuario);

            if (response.IsSuccessStatusCode)
            {
                successMessage = "¡Registro exitoso! Ahora puedes ";
            }
            else
            {
                var error = await response.Content.ReadFromJsonAsync<Dictionary<string, string>>();
                errorMessage = error?["error"] ?? "Ocurrió un error al registrar el usuario.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error de conexión: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }
}