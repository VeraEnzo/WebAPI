@inject HttpClient Http
@inject NavigationManager Navigation

<h4>Todos los Pedidos (Vista de Administrador)</h4>

<div class="row mb-3">
    <div class="col-md-4">
        <input type="number" class="form-control" placeholder="Filtrar por N° de Pedido..." @oninput="FiltrarPorId" />
    </div>
    <div class="col-md-4">
        <input type="text" class="form-control" placeholder="Filtrar por Nombre de Usuario..." @oninput="FiltrarPorNombre" />
    </div>
</div>

@if (todosLosPedidos == null)
{
    <p><em>Cargando todos los pedidos...</em></p>
}
else if (!pedidosFiltrados.Any())
{
    <p>No se encontraron pedidos que coincidan con el filtro.</p>
}
else
{
    <table class="table table-hover">
        <thead>
            <tr>
                <th>N° de Pedido</th>
                <th>Fecha</th>
                <th>Usuario</th>
                <th>Items</th>
                <th class="text-end">Total</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var pedido in pedidosFiltrados)
            {
                <tr @onclick="() => VerDetalle(pedido.Id)" style="cursor:pointer">
                    <td>#@pedido.Id</td>
                    <td>@pedido.FechaPedido.ToLocalTime().ToString("dd/MM/yyyy")</td>
                    <td>@pedido.NombreUsuario (ID: @pedido.UsuarioId)</td>
                    <td>@pedido.CantidadItems</td>
                    <td class="text-end">@pedido.Total.ToString("C")</td>
                </tr>
            }
        </tbody>
    </table>
}

@if (errorMessage != null)
{
    <div class="alert alert-danger">@errorMessage</div>
}


@code {
    private List<PedidoResumenDTO>? todosLosPedidos; // La lista original sin filtrar
    private List<PedidoResumenDTO> pedidosFiltrados = new(); // La lista que se muestra en pantalla
    private string? errorMessage;
    private string filtroNombre = "";
    private int? filtroId;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Llama al endpoint de admin que devuelve TODOS los pedidos
            todosLosPedidos = await Http.GetFromJsonAsync<List<PedidoResumenDTO>>("pedidos");
            AplicarFiltros();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar los pedidos: {ex.Message}";
        }
    }

    private void FiltrarPorId(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int id))
        {
            filtroId = id;
        }
        else
        {
            filtroId = null;
        }
        AplicarFiltros();
    }

    private void FiltrarPorNombre(ChangeEventArgs e)
    {
        filtroNombre = e.Value?.ToString() ?? "";
        AplicarFiltros();
    }

    private void AplicarFiltros()
    {
        if (todosLosPedidos == null) return;

        IEnumerable<PedidoResumenDTO> resultado = todosLosPedidos;

        if (filtroId.HasValue)
        {
            resultado = resultado.Where(p => p.Id == filtroId.Value);
        }

        if (!string.IsNullOrWhiteSpace(filtroNombre))
        {
            resultado = resultado.Where(p => p.NombreUsuario.Contains(filtroNombre, StringComparison.OrdinalIgnoreCase));
        }

        pedidosFiltrados = resultado.ToList();
    }

    private void VerDetalle(int pedidoId)
    {
        Navigation.NavigateTo($"/pedidos/{pedidoId}");
    }
}